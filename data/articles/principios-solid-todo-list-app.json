{
  "slug": "principios-solid-todo-list-app",
  "title": "Principios SOLID explicado con React APP",
  "description": "Los principios SOLID son un conjunto de pautas que los desarrolladores de software pueden seguir para crear código limpio, fácil de mantener y escalable. Para entender mejor este concepto veamos un ejemplo con la clasica App 'TO-DO LIST' y React.js",
  "image": "https://images.unsplash.com/photo-1487088678257-3a541e6e3922?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1974&q=80",
  "content": "<p> Los principios SOLID son un conjunto de pautas que los desarrolladores de software pueden seguir para crear código limpio, fácil de mantener y escalable. Al aplicar estos principios, se pueden evitar problemas comunes en el desarrollo de software, como la dificultad para agregar nuevas funcionalidades, la fragilidad del código y la dificultad para encontrar y corregir errores.</p> <p>Para entender mejor este concepto veamos un ejemplo con la clasica App 'TO-DO LIST' y React.js</p> <ul> <li>S - Responsabilidad Única (Single Resposability)</li> <span>El principio de Responsabilidad Única establece que cada clase o módulo debe tener una sola responsabilidad. En el contexto de React, esto significa que cada componente debe tener una única responsabilidad. En otras palabras, cada componente debe ser responsable de hacer solo una cosa. Por ejemplo, digamos que tienes una aplicación de lista de tareas en React. Puedes tener un componente que represente cada tarea en la lista, y otro componente que represente la lista en sí misma.El componente que representa cada tarea debe ser responsable de mostrar los detalles de esa tarea, como su título y descripción, y de permitir al usuario marcar la tarea como completada o eliminarla. Este componente no debe preocuparse por cómo se ve la lista de tareas en su conjunto o cómo se almacenan las tareas. <br></br> El componente que representa la lista de tareas debe ser responsable de mostrar todas las tareas y de permitir al usuario agregar nuevas tareas. Este componente no debe preocuparse por cómo se representa cada tarea individualmente. <br></br> Al seguir el principio de Responsabilidad Única, cada componente se encarga de hacer una sola cosa, lo que hace que el código sea más fácil de entender, mantener y extender. Además, si necesitas cambiar la forma en que se representan las tareas o cómo se almacenan, solo tendrás que cambiar un componente, en lugar de tener que buscar y cambiar en varios lugares del código. </span> </ul> <ul> <li>O - Principio de Abierto/Cerrado (Open/Closed Principle)</li> <span> Este principio establece que las clases o módulos deben estar abiertos para la extensión, pero cerrados para la modificación. En React, esto se puede aplicar mediante el uso de patrones de diseño como la composición de componentes. <br></br> Por ejemplo, si quieres agregar una nueva funcionalidad a tu aplicación de lista de tareas, como la capacidad de agregar etiquetas a cada tarea, puedes crear un nuevo componente de 'etiquetas' y componerlo en el componente de la tarea existente. De esta manera, el componente de la tarea se mantiene cerrado para la modificación, pero se extiende con la nueva funcionalidad. </span> </ul> <ul> <li>L - Principio de Sustitución de Liskov (Liskov Substitution Principle)</li> <span> Este principio establece que una clase derivada debe ser capaz de ser utilizada en lugar de su clase base sin cambiar el comportamiento del programa. En React, esto se puede aplicar asegurándose de que los componentes secundarios que componen un componente padre sean intercambiables sin cambiar el comportamiento del componente padre. <br></br> Por ejemplo, si tienes un componente de 'lista de tareas' que está compuesto por componentes de 'tarea' individuales, cada componente de tarea debe tener una interfaz (API) consistente para que puedan ser intercambiados sin cambiar el comportamiento del componente de la lista de tareas. </span> </ul> <ul> <li>I - Principio de Segregación de Interfaz (Interface Segregation Principle)</li> <span> Este principio establece que las interfaces deben ser específicas para cada cliente que las utiliza. En React, esto se puede aplicar mediante el uso de componentes de presentación y componentes de contenedor. <br></br> Los componentes de presentación son componentes que se centran en la visualización de la información, mientras que los componentes de contenedor se centran en la gestión de la lógica de la aplicación. De esta manera, los componentes de presentación tienen una interfaz específica para los clientes que se preocupan por la visualización de la información, y los componentes de contenedor tienen una interfaz específica para los clientes que se preocupan por la lógica de la aplicación. </span> </ul> <ul> <li> D - Principio de Inversión de Dependencia (Dependency Inversion Principle)</li> <span> Este principio establece que los módulos de alto nivel no deben depender de módulos de bajo nivel. En cambio, ambos deben depender de abstracciones. En React, esto se puede aplicar mediante el uso de patrones de diseño como la inyección de dependencias. <br></br> Por ejemplo, si tienes un componente de 'lista de tareas' que necesita acceder a una API para obtener y actualizar las tareas, puedes inyectar una instancia de la API en el componente de la lista de tareas en lugar de hacer que el componente de la lista de tareas dependa directamente de la API. De esta manera, el componente de la lista de tareas depende de una abstracción (una interfaz de API), en lugar de depender directamente de la implementación de la API.</span> </ul> <p>Básicamente, aplicar los principios SOLID en React es como seguir un manual para hacer las cosas bien. Te ayuda a crear componentes que sean fáciles de entender, mantener y escalar. En lugar de tener un código enredado y difícil de manejar, los principios SOLID te ayudan a crear componentes claros, concisos y reutilizables. Y, al final del día, eso significa que estás creando un mejor software. Así que, ¡sigue los principios SOLID y haz que tus componentes sean lo mejor que puedan ser!</p> <img src='https://media0.giphy.com/media/1oHOrPkIa9qHuJcW4Z/giphy.gif?cid=ecf05e47126cclkxyjxkh6du4arnefew0s8twjwxfqu15xxq&rid=giphy.gif&ct=g' />",
  "references": ["https://www.digitalocean.com/community/conceptual-articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design", "https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/"],
  "date_created": "2023-03-05T19:47:08.296Z",
  "date_updated": "2023-03-05T19:47:08.296Z",
  "is_published": false,
  "category_id": 3
}